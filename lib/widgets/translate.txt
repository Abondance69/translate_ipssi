import 'package:flutter/material.dart';
import 'package:translate_ipssi/services/groq.dart';
import 'package:translate_ipssi/widgets/skeleton.dart';

Future<dynamic> getTranslation() async {
  try {
    final groqService = await GroqService().getTranslation();
    return groqService;
  } catch (e) {
    throw Exception('Erreur lors de la récupération des données: $e');
  }
}

Widget translationData() {
  List messages = [];
  return FutureBuilder<dynamic>(
    future: getTranslation(),
    builder: (context, snapshot) {
      if (snapshot.connectionState == ConnectionState.waiting) {
        return const Skeleton();
      } else if (snapshot.hasError) {
        return Center(
          child: Text('Erreur: ${snapshot.error}'),
        );
      } else if (snapshot.hasData) {
        // String id = snapshot.data["id"];
        String content = snapshot.data["choices"][0]["message"]["content"];
        String sender = snapshot.data["choices"][0]["message"]["role"];
        print(sender);

        messages.add({
          'content': content,
          'sender': sender,
        });

        return messagesListView(messages);
      } else {
        return const Text('Aucune donnée disponible');
      }
    },
  );
}

Widget messagesListView(messages) {
  return ListView.builder(
    itemCount: messages.length,
    itemBuilder: (context, index) {
      final message = messages[index];
      return Padding(
        padding: const EdgeInsets.symmetric(vertical: 5, horizontal: 16),
        child: Align(
          alignment: message['sender'] == 'assistant'
              ? Alignment.centerRight
              : Alignment.centerLeft,
          child: Container(
              padding: const EdgeInsets.symmetric(horizontal: 15, vertical: 10),
              decoration: BoxDecoration(
                color: message['sender'] == 'assistant'
                    ? const Color.fromARGB(255, 0, 36, 65)
                    : const Color.fromARGB(255, 232, 232, 232),
                borderRadius: BorderRadius.circular(20),
              ),
              child: ListTile(
                title: Text(
                  message['content']!,
                  style: const TextStyle(fontSize: 16, color: Colors.white),
                ),
                subtitle: Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Text(
                      message['sender'] ?? "",
                      style: const TextStyle(
                          color: Color.fromARGB(255, 206, 206, 206)),
                    ),
                    const Text(
                      "12:25",
                      style:
                          TextStyle(color: Color.fromARGB(255, 206, 206, 206)),
                    ),
                  ],
                ),
              )),
        ),
      );
    },
  );
}
